// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: pkg/api/proto/logs.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogServiceClient interface {
	// StreamLogs provides bidirectional streaming for logs.
	// Clients can stream parameter updates, server streams log content.
	StreamLogs(ctx context.Context, opts ...grpc.CallOption) (LogService_StreamLogsClient, error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) StreamLogs(ctx context.Context, opts ...grpc.CallOption) (LogService_StreamLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogService_ServiceDesc.Streams[0], "/rune.api.LogService/StreamLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceStreamLogsClient{stream}
	return x, nil
}

type LogService_StreamLogsClient interface {
	Send(*LogRequest) error
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type logServiceStreamLogsClient struct {
	grpc.ClientStream
}

func (x *logServiceStreamLogsClient) Send(m *LogRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logServiceStreamLogsClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogServiceServer is the server API for LogService service.
// All implementations must embed UnimplementedLogServiceServer
// for forward compatibility
type LogServiceServer interface {
	// StreamLogs provides bidirectional streaming for logs.
	// Clients can stream parameter updates, server streams log content.
	StreamLogs(LogService_StreamLogsServer) error
	mustEmbedUnimplementedLogServiceServer()
}

// UnimplementedLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (UnimplementedLogServiceServer) StreamLogs(LogService_StreamLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogs not implemented")
}
func (UnimplementedLogServiceServer) mustEmbedUnimplementedLogServiceServer() {}

// UnsafeLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServiceServer will
// result in compilation errors.
type UnsafeLogServiceServer interface {
	mustEmbedUnimplementedLogServiceServer()
}

func RegisterLogServiceServer(s grpc.ServiceRegistrar, srv LogServiceServer) {
	s.RegisterService(&LogService_ServiceDesc, srv)
}

func _LogService_StreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogServiceServer).StreamLogs(&logServiceStreamLogsServer{stream})
}

type LogService_StreamLogsServer interface {
	Send(*LogResponse) error
	Recv() (*LogRequest, error)
	grpc.ServerStream
}

type logServiceStreamLogsServer struct {
	grpc.ServerStream
}

func (x *logServiceStreamLogsServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logServiceStreamLogsServer) Recv() (*LogRequest, error) {
	m := new(LogRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogService_ServiceDesc is the grpc.ServiceDesc for LogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rune.api.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLogs",
			Handler:       _LogService_StreamLogs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/api/proto/logs.proto",
}
