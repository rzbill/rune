// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: pkg/api/proto/exec.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExecServiceClient is the client API for ExecService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExecServiceClient interface {
	// StreamExec provides bidirectional streaming for exec.
	StreamExec(ctx context.Context, opts ...grpc.CallOption) (ExecService_StreamExecClient, error)
}

type execServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExecServiceClient(cc grpc.ClientConnInterface) ExecServiceClient {
	return &execServiceClient{cc}
}

func (c *execServiceClient) StreamExec(ctx context.Context, opts ...grpc.CallOption) (ExecService_StreamExecClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExecService_ServiceDesc.Streams[0], "/rune.api.ExecService/StreamExec", opts...)
	if err != nil {
		return nil, err
	}
	x := &execServiceStreamExecClient{stream}
	return x, nil
}

type ExecService_StreamExecClient interface {
	Send(*ExecRequest) error
	Recv() (*ExecResponse, error)
	grpc.ClientStream
}

type execServiceStreamExecClient struct {
	grpc.ClientStream
}

func (x *execServiceStreamExecClient) Send(m *ExecRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *execServiceStreamExecClient) Recv() (*ExecResponse, error) {
	m := new(ExecResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExecServiceServer is the server API for ExecService service.
// All implementations must embed UnimplementedExecServiceServer
// for forward compatibility
type ExecServiceServer interface {
	// StreamExec provides bidirectional streaming for exec.
	StreamExec(ExecService_StreamExecServer) error
	mustEmbedUnimplementedExecServiceServer()
}

// UnimplementedExecServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExecServiceServer struct {
}

func (UnimplementedExecServiceServer) StreamExec(ExecService_StreamExecServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamExec not implemented")
}
func (UnimplementedExecServiceServer) mustEmbedUnimplementedExecServiceServer() {}

// UnsafeExecServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecServiceServer will
// result in compilation errors.
type UnsafeExecServiceServer interface {
	mustEmbedUnimplementedExecServiceServer()
}

func RegisterExecServiceServer(s grpc.ServiceRegistrar, srv ExecServiceServer) {
	s.RegisterService(&ExecService_ServiceDesc, srv)
}

func _ExecService_StreamExec_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExecServiceServer).StreamExec(&execServiceStreamExecServer{stream})
}

type ExecService_StreamExecServer interface {
	Send(*ExecResponse) error
	Recv() (*ExecRequest, error)
	grpc.ServerStream
}

type execServiceStreamExecServer struct {
	grpc.ServerStream
}

func (x *execServiceStreamExecServer) Send(m *ExecResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *execServiceStreamExecServer) Recv() (*ExecRequest, error) {
	m := new(ExecRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExecService_ServiceDesc is the grpc.ServiceDesc for ExecService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExecService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rune.api.ExecService",
	HandlerType: (*ExecServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamExec",
			Handler:       _ExecService_StreamExec_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/api/proto/exec.proto",
}
