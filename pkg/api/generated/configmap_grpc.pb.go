// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: pkg/api/proto/configmap.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigMapServiceClient is the client API for ConfigMapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigMapServiceClient interface {
	CreateConfigMap(ctx context.Context, in *CreateConfigMapRequest, opts ...grpc.CallOption) (*ConfigMapResponse, error)
	GetConfigMap(ctx context.Context, in *GetConfigMapRequest, opts ...grpc.CallOption) (*ConfigMapResponse, error)
	UpdateConfigMap(ctx context.Context, in *UpdateConfigMapRequest, opts ...grpc.CallOption) (*ConfigMapResponse, error)
	DeleteConfigMap(ctx context.Context, in *DeleteConfigMapRequest, opts ...grpc.CallOption) (*Status, error)
	ListConfigMaps(ctx context.Context, in *ListConfigMapsRequest, opts ...grpc.CallOption) (*ListConfigMapsResponse, error)
}

type configMapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigMapServiceClient(cc grpc.ClientConnInterface) ConfigMapServiceClient {
	return &configMapServiceClient{cc}
}

func (c *configMapServiceClient) CreateConfigMap(ctx context.Context, in *CreateConfigMapRequest, opts ...grpc.CallOption) (*ConfigMapResponse, error) {
	out := new(ConfigMapResponse)
	err := c.cc.Invoke(ctx, "/rune.api.ConfigMapService/CreateConfigMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMapServiceClient) GetConfigMap(ctx context.Context, in *GetConfigMapRequest, opts ...grpc.CallOption) (*ConfigMapResponse, error) {
	out := new(ConfigMapResponse)
	err := c.cc.Invoke(ctx, "/rune.api.ConfigMapService/GetConfigMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMapServiceClient) UpdateConfigMap(ctx context.Context, in *UpdateConfigMapRequest, opts ...grpc.CallOption) (*ConfigMapResponse, error) {
	out := new(ConfigMapResponse)
	err := c.cc.Invoke(ctx, "/rune.api.ConfigMapService/UpdateConfigMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMapServiceClient) DeleteConfigMap(ctx context.Context, in *DeleteConfigMapRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/rune.api.ConfigMapService/DeleteConfigMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMapServiceClient) ListConfigMaps(ctx context.Context, in *ListConfigMapsRequest, opts ...grpc.CallOption) (*ListConfigMapsResponse, error) {
	out := new(ListConfigMapsResponse)
	err := c.cc.Invoke(ctx, "/rune.api.ConfigMapService/ListConfigMaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigMapServiceServer is the server API for ConfigMapService service.
// All implementations must embed UnimplementedConfigMapServiceServer
// for forward compatibility
type ConfigMapServiceServer interface {
	CreateConfigMap(context.Context, *CreateConfigMapRequest) (*ConfigMapResponse, error)
	GetConfigMap(context.Context, *GetConfigMapRequest) (*ConfigMapResponse, error)
	UpdateConfigMap(context.Context, *UpdateConfigMapRequest) (*ConfigMapResponse, error)
	DeleteConfigMap(context.Context, *DeleteConfigMapRequest) (*Status, error)
	ListConfigMaps(context.Context, *ListConfigMapsRequest) (*ListConfigMapsResponse, error)
	mustEmbedUnimplementedConfigMapServiceServer()
}

// UnimplementedConfigMapServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConfigMapServiceServer struct {
}

func (UnimplementedConfigMapServiceServer) CreateConfigMap(context.Context, *CreateConfigMapRequest) (*ConfigMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfigMap not implemented")
}
func (UnimplementedConfigMapServiceServer) GetConfigMap(context.Context, *GetConfigMapRequest) (*ConfigMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigMap not implemented")
}
func (UnimplementedConfigMapServiceServer) UpdateConfigMap(context.Context, *UpdateConfigMapRequest) (*ConfigMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigMap not implemented")
}
func (UnimplementedConfigMapServiceServer) DeleteConfigMap(context.Context, *DeleteConfigMapRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfigMap not implemented")
}
func (UnimplementedConfigMapServiceServer) ListConfigMaps(context.Context, *ListConfigMapsRequest) (*ListConfigMapsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigMaps not implemented")
}
func (UnimplementedConfigMapServiceServer) mustEmbedUnimplementedConfigMapServiceServer() {}

// UnsafeConfigMapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigMapServiceServer will
// result in compilation errors.
type UnsafeConfigMapServiceServer interface {
	mustEmbedUnimplementedConfigMapServiceServer()
}

func RegisterConfigMapServiceServer(s grpc.ServiceRegistrar, srv ConfigMapServiceServer) {
	s.RegisterService(&ConfigMapService_ServiceDesc, srv)
}

func _ConfigMapService_CreateConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapServiceServer).CreateConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.ConfigMapService/CreateConfigMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapServiceServer).CreateConfigMap(ctx, req.(*CreateConfigMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMapService_GetConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapServiceServer).GetConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.ConfigMapService/GetConfigMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapServiceServer).GetConfigMap(ctx, req.(*GetConfigMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMapService_UpdateConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapServiceServer).UpdateConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.ConfigMapService/UpdateConfigMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapServiceServer).UpdateConfigMap(ctx, req.(*UpdateConfigMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMapService_DeleteConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapServiceServer).DeleteConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.ConfigMapService/DeleteConfigMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapServiceServer).DeleteConfigMap(ctx, req.(*DeleteConfigMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMapService_ListConfigMaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigMapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapServiceServer).ListConfigMaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.ConfigMapService/ListConfigMaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapServiceServer).ListConfigMaps(ctx, req.(*ListConfigMapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigMapService_ServiceDesc is the grpc.ServiceDesc for ConfigMapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigMapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rune.api.ConfigMapService",
	HandlerType: (*ConfigMapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConfigMap",
			Handler:    _ConfigMapService_CreateConfigMap_Handler,
		},
		{
			MethodName: "GetConfigMap",
			Handler:    _ConfigMapService_GetConfigMap_Handler,
		},
		{
			MethodName: "UpdateConfigMap",
			Handler:    _ConfigMapService_UpdateConfigMap_Handler,
		},
		{
			MethodName: "DeleteConfigMap",
			Handler:    _ConfigMapService_DeleteConfigMap_Handler,
		},
		{
			MethodName: "ListConfigMaps",
			Handler:    _ConfigMapService_ListConfigMaps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/proto/configmap.proto",
}
