// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: pkg/api/proto/configmap.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigMapServiceClient is the client API for ConfigMapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigMapServiceClient interface {
	CreateConfigmap(ctx context.Context, in *CreateConfigmapRequest, opts ...grpc.CallOption) (*ConfigmapResponse, error)
	GetConfigmap(ctx context.Context, in *GetConfigmapRequest, opts ...grpc.CallOption) (*ConfigmapResponse, error)
	UpdateConfigmap(ctx context.Context, in *UpdateConfigmapRequest, opts ...grpc.CallOption) (*ConfigmapResponse, error)
	DeleteConfigmap(ctx context.Context, in *DeleteConfigmapRequest, opts ...grpc.CallOption) (*Status, error)
	ListConfigmaps(ctx context.Context, in *ListConfigmapsRequest, opts ...grpc.CallOption) (*ListConfigmapsResponse, error)
}

type configMapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigMapServiceClient(cc grpc.ClientConnInterface) ConfigMapServiceClient {
	return &configMapServiceClient{cc}
}

func (c *configMapServiceClient) CreateConfigmap(ctx context.Context, in *CreateConfigmapRequest, opts ...grpc.CallOption) (*ConfigmapResponse, error) {
	out := new(ConfigmapResponse)
	err := c.cc.Invoke(ctx, "/rune.api.ConfigMapService/CreateConfigmap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMapServiceClient) GetConfigmap(ctx context.Context, in *GetConfigmapRequest, opts ...grpc.CallOption) (*ConfigmapResponse, error) {
	out := new(ConfigmapResponse)
	err := c.cc.Invoke(ctx, "/rune.api.ConfigMapService/GetConfigmap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMapServiceClient) UpdateConfigmap(ctx context.Context, in *UpdateConfigmapRequest, opts ...grpc.CallOption) (*ConfigmapResponse, error) {
	out := new(ConfigmapResponse)
	err := c.cc.Invoke(ctx, "/rune.api.ConfigMapService/UpdateConfigmap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMapServiceClient) DeleteConfigmap(ctx context.Context, in *DeleteConfigmapRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/rune.api.ConfigMapService/DeleteConfigmap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMapServiceClient) ListConfigmaps(ctx context.Context, in *ListConfigmapsRequest, opts ...grpc.CallOption) (*ListConfigmapsResponse, error) {
	out := new(ListConfigmapsResponse)
	err := c.cc.Invoke(ctx, "/rune.api.ConfigMapService/ListConfigmaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigMapServiceServer is the server API for ConfigMapService service.
// All implementations must embed UnimplementedConfigMapServiceServer
// for forward compatibility
type ConfigMapServiceServer interface {
	CreateConfigmap(context.Context, *CreateConfigmapRequest) (*ConfigmapResponse, error)
	GetConfigmap(context.Context, *GetConfigmapRequest) (*ConfigmapResponse, error)
	UpdateConfigmap(context.Context, *UpdateConfigmapRequest) (*ConfigmapResponse, error)
	DeleteConfigmap(context.Context, *DeleteConfigmapRequest) (*Status, error)
	ListConfigmaps(context.Context, *ListConfigmapsRequest) (*ListConfigmapsResponse, error)
	mustEmbedUnimplementedConfigMapServiceServer()
}

// UnimplementedConfigMapServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConfigMapServiceServer struct {
}

func (UnimplementedConfigMapServiceServer) CreateConfigmap(context.Context, *CreateConfigmapRequest) (*ConfigmapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfigmap not implemented")
}
func (UnimplementedConfigMapServiceServer) GetConfigmap(context.Context, *GetConfigmapRequest) (*ConfigmapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigmap not implemented")
}
func (UnimplementedConfigMapServiceServer) UpdateConfigmap(context.Context, *UpdateConfigmapRequest) (*ConfigmapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigmap not implemented")
}
func (UnimplementedConfigMapServiceServer) DeleteConfigmap(context.Context, *DeleteConfigmapRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfigmap not implemented")
}
func (UnimplementedConfigMapServiceServer) ListConfigmaps(context.Context, *ListConfigmapsRequest) (*ListConfigmapsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigmaps not implemented")
}
func (UnimplementedConfigMapServiceServer) mustEmbedUnimplementedConfigMapServiceServer() {}

// UnsafeConfigMapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigMapServiceServer will
// result in compilation errors.
type UnsafeConfigMapServiceServer interface {
	mustEmbedUnimplementedConfigMapServiceServer()
}

func RegisterConfigMapServiceServer(s grpc.ServiceRegistrar, srv ConfigMapServiceServer) {
	s.RegisterService(&ConfigMapService_ServiceDesc, srv)
}

func _ConfigMapService_CreateConfigmap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigmapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapServiceServer).CreateConfigmap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.ConfigMapService/CreateConfigmap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapServiceServer).CreateConfigmap(ctx, req.(*CreateConfigmapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMapService_GetConfigmap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigmapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapServiceServer).GetConfigmap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.ConfigMapService/GetConfigmap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapServiceServer).GetConfigmap(ctx, req.(*GetConfigmapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMapService_UpdateConfigmap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigmapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapServiceServer).UpdateConfigmap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.ConfigMapService/UpdateConfigmap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapServiceServer).UpdateConfigmap(ctx, req.(*UpdateConfigmapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMapService_DeleteConfigmap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigmapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapServiceServer).DeleteConfigmap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.ConfigMapService/DeleteConfigmap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapServiceServer).DeleteConfigmap(ctx, req.(*DeleteConfigmapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMapService_ListConfigmaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigmapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMapServiceServer).ListConfigmaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.ConfigMapService/ListConfigmaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMapServiceServer).ListConfigmaps(ctx, req.(*ListConfigmapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigMapService_ServiceDesc is the grpc.ServiceDesc for ConfigMapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigMapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rune.api.ConfigMapService",
	HandlerType: (*ConfigMapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConfigmap",
			Handler:    _ConfigMapService_CreateConfigmap_Handler,
		},
		{
			MethodName: "GetConfigmap",
			Handler:    _ConfigMapService_GetConfigmap_Handler,
		},
		{
			MethodName: "UpdateConfigmap",
			Handler:    _ConfigMapService_UpdateConfigmap_Handler,
		},
		{
			MethodName: "DeleteConfigmap",
			Handler:    _ConfigMapService_DeleteConfigmap_Handler,
		},
		{
			MethodName: "ListConfigmaps",
			Handler:    _ConfigMapService_ListConfigmaps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/proto/configmap.proto",
}
