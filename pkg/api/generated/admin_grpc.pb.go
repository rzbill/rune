// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: pkg/api/proto/admin.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	AdminBootstrap(ctx context.Context, in *AdminBootstrapRequest, opts ...grpc.CallOption) (*AdminBootstrapResponse, error)
	PolicyCreate(ctx context.Context, in *PolicyCreateRequest, opts ...grpc.CallOption) (*PolicyCreateResponse, error)
	PolicyUpdate(ctx context.Context, in *PolicyUpdateRequest, opts ...grpc.CallOption) (*PolicyUpdateResponse, error)
	PolicyDelete(ctx context.Context, in *PolicyDeleteRequest, opts ...grpc.CallOption) (*PolicyDeleteResponse, error)
	PolicyGet(ctx context.Context, in *PolicyGetRequest, opts ...grpc.CallOption) (*PolicyGetResponse, error)
	PolicyList(ctx context.Context, in *PolicyListRequest, opts ...grpc.CallOption) (*PolicyListResponse, error)
	PolicyAttachToSubject(ctx context.Context, in *PolicyAttachToSubjectRequest, opts ...grpc.CallOption) (*PolicyAttachToSubjectResponse, error)
	PolicyDetachFromSubject(ctx context.Context, in *PolicyDetachFromSubjectRequest, opts ...grpc.CallOption) (*PolicyDetachFromSubjectResponse, error)
	UserCreate(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserCreateResponse, error)
	UserList(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListResponse, error)
	// List tokens (no secrets)
	TokenList(ctx context.Context, in *TokenListRequest, opts ...grpc.CallOption) (*TokenListResponse, error)
	// Registry admin RPCs
	ListRegistries(ctx context.Context, in *ListRegistriesRequest, opts ...grpc.CallOption) (*ListRegistriesResponse, error)
	GetRegistry(ctx context.Context, in *GetRegistryRequest, opts ...grpc.CallOption) (*GetRegistryResponse, error)
	AddRegistry(ctx context.Context, in *AddRegistryRequest, opts ...grpc.CallOption) (*AddRegistryResponse, error)
	UpdateRegistry(ctx context.Context, in *UpdateRegistryRequest, opts ...grpc.CallOption) (*UpdateRegistryResponse, error)
	RemoveRegistry(ctx context.Context, in *RemoveRegistryRequest, opts ...grpc.CallOption) (*RemoveRegistryResponse, error)
	BootstrapAuth(ctx context.Context, in *BootstrapAuthRequest, opts ...grpc.CallOption) (*BootstrapAuthResponse, error)
	TestRegistry(ctx context.Context, in *TestRegistryRequest, opts ...grpc.CallOption) (*TestRegistryResponse, error)
	RegistriesStatus(ctx context.Context, in *RegistriesStatusRequest, opts ...grpc.CallOption) (*RegistriesStatusResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) AdminBootstrap(ctx context.Context, in *AdminBootstrapRequest, opts ...grpc.CallOption) (*AdminBootstrapResponse, error) {
	out := new(AdminBootstrapResponse)
	err := c.cc.Invoke(ctx, "/rune.api.AdminService/AdminBootstrap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) PolicyCreate(ctx context.Context, in *PolicyCreateRequest, opts ...grpc.CallOption) (*PolicyCreateResponse, error) {
	out := new(PolicyCreateResponse)
	err := c.cc.Invoke(ctx, "/rune.api.AdminService/PolicyCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) PolicyUpdate(ctx context.Context, in *PolicyUpdateRequest, opts ...grpc.CallOption) (*PolicyUpdateResponse, error) {
	out := new(PolicyUpdateResponse)
	err := c.cc.Invoke(ctx, "/rune.api.AdminService/PolicyUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) PolicyDelete(ctx context.Context, in *PolicyDeleteRequest, opts ...grpc.CallOption) (*PolicyDeleteResponse, error) {
	out := new(PolicyDeleteResponse)
	err := c.cc.Invoke(ctx, "/rune.api.AdminService/PolicyDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) PolicyGet(ctx context.Context, in *PolicyGetRequest, opts ...grpc.CallOption) (*PolicyGetResponse, error) {
	out := new(PolicyGetResponse)
	err := c.cc.Invoke(ctx, "/rune.api.AdminService/PolicyGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) PolicyList(ctx context.Context, in *PolicyListRequest, opts ...grpc.CallOption) (*PolicyListResponse, error) {
	out := new(PolicyListResponse)
	err := c.cc.Invoke(ctx, "/rune.api.AdminService/PolicyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) PolicyAttachToSubject(ctx context.Context, in *PolicyAttachToSubjectRequest, opts ...grpc.CallOption) (*PolicyAttachToSubjectResponse, error) {
	out := new(PolicyAttachToSubjectResponse)
	err := c.cc.Invoke(ctx, "/rune.api.AdminService/PolicyAttachToSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) PolicyDetachFromSubject(ctx context.Context, in *PolicyDetachFromSubjectRequest, opts ...grpc.CallOption) (*PolicyDetachFromSubjectResponse, error) {
	out := new(PolicyDetachFromSubjectResponse)
	err := c.cc.Invoke(ctx, "/rune.api.AdminService/PolicyDetachFromSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UserCreate(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserCreateResponse, error) {
	out := new(UserCreateResponse)
	err := c.cc.Invoke(ctx, "/rune.api.AdminService/UserCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UserList(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListResponse, error) {
	out := new(UserListResponse)
	err := c.cc.Invoke(ctx, "/rune.api.AdminService/UserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) TokenList(ctx context.Context, in *TokenListRequest, opts ...grpc.CallOption) (*TokenListResponse, error) {
	out := new(TokenListResponse)
	err := c.cc.Invoke(ctx, "/rune.api.AdminService/TokenList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListRegistries(ctx context.Context, in *ListRegistriesRequest, opts ...grpc.CallOption) (*ListRegistriesResponse, error) {
	out := new(ListRegistriesResponse)
	err := c.cc.Invoke(ctx, "/rune.api.AdminService/ListRegistries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetRegistry(ctx context.Context, in *GetRegistryRequest, opts ...grpc.CallOption) (*GetRegistryResponse, error) {
	out := new(GetRegistryResponse)
	err := c.cc.Invoke(ctx, "/rune.api.AdminService/GetRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddRegistry(ctx context.Context, in *AddRegistryRequest, opts ...grpc.CallOption) (*AddRegistryResponse, error) {
	out := new(AddRegistryResponse)
	err := c.cc.Invoke(ctx, "/rune.api.AdminService/AddRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateRegistry(ctx context.Context, in *UpdateRegistryRequest, opts ...grpc.CallOption) (*UpdateRegistryResponse, error) {
	out := new(UpdateRegistryResponse)
	err := c.cc.Invoke(ctx, "/rune.api.AdminService/UpdateRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveRegistry(ctx context.Context, in *RemoveRegistryRequest, opts ...grpc.CallOption) (*RemoveRegistryResponse, error) {
	out := new(RemoveRegistryResponse)
	err := c.cc.Invoke(ctx, "/rune.api.AdminService/RemoveRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) BootstrapAuth(ctx context.Context, in *BootstrapAuthRequest, opts ...grpc.CallOption) (*BootstrapAuthResponse, error) {
	out := new(BootstrapAuthResponse)
	err := c.cc.Invoke(ctx, "/rune.api.AdminService/BootstrapAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) TestRegistry(ctx context.Context, in *TestRegistryRequest, opts ...grpc.CallOption) (*TestRegistryResponse, error) {
	out := new(TestRegistryResponse)
	err := c.cc.Invoke(ctx, "/rune.api.AdminService/TestRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RegistriesStatus(ctx context.Context, in *RegistriesStatusRequest, opts ...grpc.CallOption) (*RegistriesStatusResponse, error) {
	out := new(RegistriesStatusResponse)
	err := c.cc.Invoke(ctx, "/rune.api.AdminService/RegistriesStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	AdminBootstrap(context.Context, *AdminBootstrapRequest) (*AdminBootstrapResponse, error)
	PolicyCreate(context.Context, *PolicyCreateRequest) (*PolicyCreateResponse, error)
	PolicyUpdate(context.Context, *PolicyUpdateRequest) (*PolicyUpdateResponse, error)
	PolicyDelete(context.Context, *PolicyDeleteRequest) (*PolicyDeleteResponse, error)
	PolicyGet(context.Context, *PolicyGetRequest) (*PolicyGetResponse, error)
	PolicyList(context.Context, *PolicyListRequest) (*PolicyListResponse, error)
	PolicyAttachToSubject(context.Context, *PolicyAttachToSubjectRequest) (*PolicyAttachToSubjectResponse, error)
	PolicyDetachFromSubject(context.Context, *PolicyDetachFromSubjectRequest) (*PolicyDetachFromSubjectResponse, error)
	UserCreate(context.Context, *UserCreateRequest) (*UserCreateResponse, error)
	UserList(context.Context, *UserListRequest) (*UserListResponse, error)
	// List tokens (no secrets)
	TokenList(context.Context, *TokenListRequest) (*TokenListResponse, error)
	// Registry admin RPCs
	ListRegistries(context.Context, *ListRegistriesRequest) (*ListRegistriesResponse, error)
	GetRegistry(context.Context, *GetRegistryRequest) (*GetRegistryResponse, error)
	AddRegistry(context.Context, *AddRegistryRequest) (*AddRegistryResponse, error)
	UpdateRegistry(context.Context, *UpdateRegistryRequest) (*UpdateRegistryResponse, error)
	RemoveRegistry(context.Context, *RemoveRegistryRequest) (*RemoveRegistryResponse, error)
	BootstrapAuth(context.Context, *BootstrapAuthRequest) (*BootstrapAuthResponse, error)
	TestRegistry(context.Context, *TestRegistryRequest) (*TestRegistryResponse, error)
	RegistriesStatus(context.Context, *RegistriesStatusRequest) (*RegistriesStatusResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) AdminBootstrap(context.Context, *AdminBootstrapRequest) (*AdminBootstrapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminBootstrap not implemented")
}
func (UnimplementedAdminServiceServer) PolicyCreate(context.Context, *PolicyCreateRequest) (*PolicyCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicyCreate not implemented")
}
func (UnimplementedAdminServiceServer) PolicyUpdate(context.Context, *PolicyUpdateRequest) (*PolicyUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicyUpdate not implemented")
}
func (UnimplementedAdminServiceServer) PolicyDelete(context.Context, *PolicyDeleteRequest) (*PolicyDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicyDelete not implemented")
}
func (UnimplementedAdminServiceServer) PolicyGet(context.Context, *PolicyGetRequest) (*PolicyGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicyGet not implemented")
}
func (UnimplementedAdminServiceServer) PolicyList(context.Context, *PolicyListRequest) (*PolicyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicyList not implemented")
}
func (UnimplementedAdminServiceServer) PolicyAttachToSubject(context.Context, *PolicyAttachToSubjectRequest) (*PolicyAttachToSubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicyAttachToSubject not implemented")
}
func (UnimplementedAdminServiceServer) PolicyDetachFromSubject(context.Context, *PolicyDetachFromSubjectRequest) (*PolicyDetachFromSubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicyDetachFromSubject not implemented")
}
func (UnimplementedAdminServiceServer) UserCreate(context.Context, *UserCreateRequest) (*UserCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreate not implemented")
}
func (UnimplementedAdminServiceServer) UserList(context.Context, *UserListRequest) (*UserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserList not implemented")
}
func (UnimplementedAdminServiceServer) TokenList(context.Context, *TokenListRequest) (*TokenListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenList not implemented")
}
func (UnimplementedAdminServiceServer) ListRegistries(context.Context, *ListRegistriesRequest) (*ListRegistriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegistries not implemented")
}
func (UnimplementedAdminServiceServer) GetRegistry(context.Context, *GetRegistryRequest) (*GetRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistry not implemented")
}
func (UnimplementedAdminServiceServer) AddRegistry(context.Context, *AddRegistryRequest) (*AddRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRegistry not implemented")
}
func (UnimplementedAdminServiceServer) UpdateRegistry(context.Context, *UpdateRegistryRequest) (*UpdateRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegistry not implemented")
}
func (UnimplementedAdminServiceServer) RemoveRegistry(context.Context, *RemoveRegistryRequest) (*RemoveRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRegistry not implemented")
}
func (UnimplementedAdminServiceServer) BootstrapAuth(context.Context, *BootstrapAuthRequest) (*BootstrapAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BootstrapAuth not implemented")
}
func (UnimplementedAdminServiceServer) TestRegistry(context.Context, *TestRegistryRequest) (*TestRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestRegistry not implemented")
}
func (UnimplementedAdminServiceServer) RegistriesStatus(context.Context, *RegistriesStatusRequest) (*RegistriesStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistriesStatus not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_AdminBootstrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminBootstrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AdminBootstrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.AdminService/AdminBootstrap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AdminBootstrap(ctx, req.(*AdminBootstrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_PolicyCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).PolicyCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.AdminService/PolicyCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).PolicyCreate(ctx, req.(*PolicyCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_PolicyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).PolicyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.AdminService/PolicyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).PolicyUpdate(ctx, req.(*PolicyUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_PolicyDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).PolicyDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.AdminService/PolicyDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).PolicyDelete(ctx, req.(*PolicyDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_PolicyGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).PolicyGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.AdminService/PolicyGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).PolicyGet(ctx, req.(*PolicyGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_PolicyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).PolicyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.AdminService/PolicyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).PolicyList(ctx, req.(*PolicyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_PolicyAttachToSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyAttachToSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).PolicyAttachToSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.AdminService/PolicyAttachToSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).PolicyAttachToSubject(ctx, req.(*PolicyAttachToSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_PolicyDetachFromSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyDetachFromSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).PolicyDetachFromSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.AdminService/PolicyDetachFromSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).PolicyDetachFromSubject(ctx, req.(*PolicyDetachFromSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UserCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UserCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.AdminService/UserCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UserCreate(ctx, req.(*UserCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.AdminService/UserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UserList(ctx, req.(*UserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_TokenList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).TokenList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.AdminService/TokenList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).TokenList(ctx, req.(*TokenListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListRegistries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegistriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListRegistries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.AdminService/ListRegistries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListRegistries(ctx, req.(*ListRegistriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.AdminService/GetRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetRegistry(ctx, req.(*GetRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.AdminService/AddRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddRegistry(ctx, req.(*AddRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.AdminService/UpdateRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateRegistry(ctx, req.(*UpdateRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.AdminService/RemoveRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveRegistry(ctx, req.(*RemoveRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_BootstrapAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BootstrapAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).BootstrapAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.AdminService/BootstrapAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).BootstrapAuth(ctx, req.(*BootstrapAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_TestRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).TestRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.AdminService/TestRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).TestRegistry(ctx, req.(*TestRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RegistriesStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistriesStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RegistriesStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rune.api.AdminService/RegistriesStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RegistriesStatus(ctx, req.(*RegistriesStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rune.api.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminBootstrap",
			Handler:    _AdminService_AdminBootstrap_Handler,
		},
		{
			MethodName: "PolicyCreate",
			Handler:    _AdminService_PolicyCreate_Handler,
		},
		{
			MethodName: "PolicyUpdate",
			Handler:    _AdminService_PolicyUpdate_Handler,
		},
		{
			MethodName: "PolicyDelete",
			Handler:    _AdminService_PolicyDelete_Handler,
		},
		{
			MethodName: "PolicyGet",
			Handler:    _AdminService_PolicyGet_Handler,
		},
		{
			MethodName: "PolicyList",
			Handler:    _AdminService_PolicyList_Handler,
		},
		{
			MethodName: "PolicyAttachToSubject",
			Handler:    _AdminService_PolicyAttachToSubject_Handler,
		},
		{
			MethodName: "PolicyDetachFromSubject",
			Handler:    _AdminService_PolicyDetachFromSubject_Handler,
		},
		{
			MethodName: "UserCreate",
			Handler:    _AdminService_UserCreate_Handler,
		},
		{
			MethodName: "UserList",
			Handler:    _AdminService_UserList_Handler,
		},
		{
			MethodName: "TokenList",
			Handler:    _AdminService_TokenList_Handler,
		},
		{
			MethodName: "ListRegistries",
			Handler:    _AdminService_ListRegistries_Handler,
		},
		{
			MethodName: "GetRegistry",
			Handler:    _AdminService_GetRegistry_Handler,
		},
		{
			MethodName: "AddRegistry",
			Handler:    _AdminService_AddRegistry_Handler,
		},
		{
			MethodName: "UpdateRegistry",
			Handler:    _AdminService_UpdateRegistry_Handler,
		},
		{
			MethodName: "RemoveRegistry",
			Handler:    _AdminService_RemoveRegistry_Handler,
		},
		{
			MethodName: "BootstrapAuth",
			Handler:    _AdminService_BootstrapAuth_Handler,
		},
		{
			MethodName: "TestRegistry",
			Handler:    _AdminService_TestRegistry_Handler,
		},
		{
			MethodName: "RegistriesStatus",
			Handler:    _AdminService_RegistriesStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/proto/admin.proto",
}
