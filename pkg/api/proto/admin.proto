syntax = "proto3";
package rune.api;
option go_package = "github.com/rzbill/rune/pkg/api/generated";

// Subjects represent principals (user or service account)
message Subject {
  string id = 1;
  string kind = 2; // user|service
  string name = 3;
  string email = 4; // optional for users
  repeated string policies = 5; // names or ids
}

message AdminBootstrapRequest {}
message AdminBootstrapResponse {
  string token_id = 1;
  string token_secret = 2; // returned once
  string subject_id = 3;   // root/admin subject id
}

message PolicyRule {
  string resource = 1;              // services|instances|logs|exec|secrets|configmaps|users|policies|namespaces|tokens|health|orchestrator|*
  repeated string verbs = 2;        // get|list|create|update|delete|exec|logs|scale|*
  string namespace = 3;             // optional; * means all
}

message Policy {
  string id = 1;
  string name = 2;
  string description = 3;
  repeated PolicyRule rules = 4;
  bool builtin = 5;
}

message PolicyCreateRequest { Policy policy = 1; }
message PolicyCreateResponse { Policy policy = 1; }

message PolicyUpdateRequest { Policy policy = 1; }
message PolicyUpdateResponse { Policy policy = 1; }

message PolicyDeleteRequest { string id = 1; string name = 2; }
message PolicyDeleteResponse { bool deleted = 1; }

message PolicyGetRequest { string id = 1; string name = 2; }
message PolicyGetResponse { Policy policy = 1; }

message PolicyListRequest {}
message PolicyListResponse { repeated Policy policies = 1; }

message PolicyAttachToSubjectRequest {
  string policy_id = 1;
  string policy_name = 2;
  string subject_id = 3;
  string subject_name = 4;
  string subject_kind = 5; // user|service
}
message PolicyAttachToSubjectResponse { bool attached = 1; }

message PolicyDetachFromSubjectRequest {
  string policy_id = 1;
  string policy_name = 2;
  string subject_id = 3;
  string subject_name = 4;
  string subject_kind = 5; // user|service
}
message PolicyDetachFromSubjectResponse { bool detached = 1; }

message UserCreateRequest {
  string name = 1;
  string email = 2;
  repeated string policies = 3; // names or ids
}
message UserCreateResponse { Subject user = 1; }

message UserListRequest {}
message UserListResponse { repeated Subject users = 1; }

// Token listing (admin-only)
message TokenInfo {
  string id = 1;
  string name = 2;
  string subject_id = 3;
  string subject_type = 4; // user|service
  string description = 5;
  int64 issued_at = 6;   // unix seconds
  int64 expires_at = 7;  // unix seconds (0 means none)
  bool revoked = 8;
}

message TokenListRequest {}
message TokenListResponse { repeated TokenInfo tokens = 1; }

// Registry admin messages (moved under AdminService)
message RegistryAuthConfig {
  string type = 1;                 // basic | token | ecr | dockerconfigjson (optional; may be inferred)
  string username = 2;             // for basic
  string password = 3;             // for basic
  string token = 4;                // for token
  string region = 5;               // for ecr
  // from_secret is a string reference supporting ResourceRef formats (URI/FQDN/minimal)
  string from_secret = 6;
  bool bootstrap = 7;              // create/update secret from data/env if missing
  string manage = 8;               // create | update | ignore
  bool immutable = 9;              // if true, never overwrite existing secret
  map<string, string> data = 10;   // inline source (typically env-expanded server-side)
}

message RegistryConfig {
  string name = 1;                 // unique registry config name (e.g., ecr-prod)
  string registry = 2;             // registry host or wildcard (e.g., *.dkr.ecr.us-east-1.amazonaws.com)
  RegistryAuthConfig auth = 3;     // authentication settings
}

message ListRegistriesRequest {}
message ListRegistriesResponse { repeated RegistryConfig registries = 1; }

message GetRegistryRequest { string name = 1; }
message GetRegistryResponse { RegistryConfig registry = 1; }

message AddRegistryRequest { RegistryConfig registry = 1; }
message AddRegistryResponse { RegistryConfig registry = 1; }

message UpdateRegistryRequest { RegistryConfig registry = 1; }
message UpdateRegistryResponse { RegistryConfig registry = 1; }

message RemoveRegistryRequest { string name = 1; }
message RemoveRegistryResponse { bool deleted = 1; }

message BootstrapAuthRequest {
  string name = 1;                 // bootstrap a specific registry by name
  string type = 2;                 // bootstrap all registries of this type (e.g., ecr, ghcr)
  bool all = 3;                    // bootstrap all registries
}
message BootstrapAuthResponse { int32 updated = 1; }

message TestRegistryRequest {
  string name = 1;                 // registry name to test
  string image_ref = 2;            // optional image to attempt auth against
}
message TestRegistryResponse {
  bool ok = 1;
  string message = 2;
}

message RegistryRuntimeStatus {
  string name = 1;
  string registry = 2;
  string type = 3;                 // derived type (ecr/basic/token/dockerconfigjson)
  bool auth_configured = 4;        // whether auth config is present
  string last_bootstrap_at = 5;    // RFC3339 or empty
  string last_error = 6;           // last error (if any)
}

message RegistriesStatusRequest {}
message RegistriesStatusResponse { repeated RegistryRuntimeStatus registries = 1; }

service AdminService {
  rpc AdminBootstrap(AdminBootstrapRequest) returns (AdminBootstrapResponse);

  rpc PolicyCreate(PolicyCreateRequest) returns (PolicyCreateResponse);
  rpc PolicyUpdate(PolicyUpdateRequest) returns (PolicyUpdateResponse);
  rpc PolicyDelete(PolicyDeleteRequest) returns (PolicyDeleteResponse);
  rpc PolicyGet(PolicyGetRequest) returns (PolicyGetResponse);
  rpc PolicyList(PolicyListRequest) returns (PolicyListResponse);
  rpc PolicyAttachToSubject(PolicyAttachToSubjectRequest) returns (PolicyAttachToSubjectResponse);
  rpc PolicyDetachFromSubject(PolicyDetachFromSubjectRequest) returns (PolicyDetachFromSubjectResponse);

  rpc UserCreate(UserCreateRequest) returns (UserCreateResponse);
  rpc UserList(UserListRequest) returns (UserListResponse);

  // List tokens (no secrets)
  rpc TokenList(TokenListRequest) returns (TokenListResponse);

  // Registry admin RPCs
  rpc ListRegistries(ListRegistriesRequest) returns (ListRegistriesResponse);
  rpc GetRegistry(GetRegistryRequest) returns (GetRegistryResponse);
  rpc AddRegistry(AddRegistryRequest) returns (AddRegistryResponse);
  rpc UpdateRegistry(UpdateRegistryRequest) returns (UpdateRegistryResponse);
  rpc RemoveRegistry(RemoveRegistryRequest) returns (RemoveRegistryResponse);
  rpc BootstrapAuth(BootstrapAuthRequest) returns (BootstrapAuthResponse);
  rpc TestRegistry(TestRegistryRequest) returns (TestRegistryResponse);
  rpc RegistriesStatus(RegistriesStatusRequest) returns (RegistriesStatusResponse);
}


