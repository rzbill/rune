syntax = "proto3";

package rune.api;

import "pkg/api/proto/common.proto";
import "pkg/api/proto/instance.proto";

option go_package = "github.com/rzbill/rune/pkg/api/generated";

// ServiceStatus represents the current status of a service.
enum ServiceStatus {
  SERVICE_STATUS_UNSPECIFIED = 0;
  SERVICE_STATUS_PENDING = 1;     // Service is being created
  SERVICE_STATUS_RUNNING = 2;     // Service is running
  SERVICE_STATUS_UPDATING = 3;    // Service is being updated
  SERVICE_STATUS_FAILED = 4;      // Service failed to deploy or run
}

// Service represents a deployable application or workload.
message Service {
  // Unique identifier for the service
  string id = 1;
  
  // Human-readable name for the service
  string name = 2;
  
  // Namespace the service belongs to
  string namespace = 3;
  
  // Labels for the service
  map<string, string> labels = 4;
  
  // Container image for the service
  string image = 5;
  
  // Command to run in the container
  string command = 6;
  
  // Arguments to the command
  repeated string args = 7;
  
  // Environment variables for the service
  map<string, string> env = 8;
  
  // Imported environment variables sources (normalized from spec)
  repeated EnvFromSource env_from = 9;
  
  // Number of instances to run
  int32 scale = 10;
  
  // Ports exposed by the service
  repeated ServicePort ports = 11;
  
  // Resource requirements for each instance
  Resources resources = 12;
  
  // Health checks for the service
  HealthCheck health = 13;
  
  // Status of the service
  ServiceStatus status = 14;
  
  // Runtime for the service ("container" or "process")
  string runtime = 15;

  // Process-specific configuration (when Runtime="process")
  ProcessSpec process = 16;

  // Restart policy for the service
  RestartPolicy restart_policy = 17;

  // Secret mounts
  repeated SecretMount secret_mounts = 18;

  // Configmap mounts
  repeated ConfigmapMount configmap_mounts = 19;

  // Metadata for the service
  ServiceMetadata metadata = 20;
  
  // Dependencies declared by this service (normalized form)
  repeated DependencyRef dependencies = 21;

  // Simple external exposure configuration (MVP)
  ServiceExpose expose = 22;
}

// EnvFromSource represents an environment import source
message EnvFromSource {
  // Exactly one of these will be set
  string secret_name = 1;
  string configmap_name = 2;

  string namespace = 3;
  string prefix = 4;
}

// ServiceMetadata represents metadata for a service.
message ServiceMetadata {
  // Generation number for the service
  int32 generation = 1;

  // Creation timestamp (in RFC 3339 format)
  string created_at = 2;
  
  // Last update timestamp (in RFC 3339 format)
  string updated_at = 3;

  // Last non-zero scale recorded (for restart semantics)
  int32 last_non_zero_scale = 4;
}

// DependencyRef represents a dependency on another service
message DependencyRef {
  // Exactly one of service/secret/configmap should be set. Namespace optional.
  string service = 1;
  string namespace = 2;
  string secret = 3;
  string configmap = 4;
}


// SecretMount defines a secret to be mounted in a container.
message SecretMount {
  string name = 1;
  string mount_path = 2;
  string secret_name = 3;
  repeated KeyToPath items = 4;
}

// ConfigmapMount defines a config to be mounted in a container.
message ConfigmapMount {
  string name = 1;
  string mount_path = 2;
  string configmap_name = 3;
  repeated KeyToPath items = 4;
}

// CreateServiceRequest represents a request to create a new service.
message CreateServiceRequest {
  // Service to create
  Service service = 1;

  // Optional deployment tag
  string deployment_tag = 2;
  
  // Whether to create the namespace if it doesn't exist
  bool ensure_namespace = 3;
}

// ServiceResponse returns a service or status.
message ServiceResponse {
  // The service, if successful
  Service service = 1;
  
  // Status message
  Status status = 2;
}

// GetServiceRequest requests a specific service.
message GetServiceRequest {
  // Name of the service
  string name = 1;
  
  // Namespace of the service (optional, default: "default")
  string namespace = 2;
}

// ListServicesRequest requests a list of services.
message ListServicesRequest {
  // Namespace to list services from (optional, default: "default")
  string namespace = 1;
  
  // Filter services by label
  map<string, string> label_selector = 2;

  // Filter services by field
  map<string, string> field_selector = 3;
  
  // Paging parameters
  PagingParams paging = 4;
}

// ListServicesResponse returns a list of services.
message ListServicesResponse {
  // List of services
  repeated Service services = 1;
  
  // Status message
  Status status = 2;
  
  // Paging information for continuation
  PagingParams paging = 3;
}

// WatchServicesRequest requests to watch services for changes.
message WatchServicesRequest {
  // Namespace to watch services from (optional, default: "default", use "*" for all namespaces)
  string namespace = 1;
  
  // Filter services by label
  map<string, string> label_selector = 2;

  // Filter services by field
  map<string, string> field_selector = 3;
}

// WatchServicesResponse returns service change events.
message WatchServicesResponse {
  // The service that changed
  Service service = 1;
  
  // Type of event (added, modified, deleted)
  EventType event_type = 2;
  
  // Status message
  Status status = 3;
}

// UpdateServiceRequest requests an update to a service.
message UpdateServiceRequest {
  // Updated service definition
  Service service = 1;
  
  // Optional deployment tag
  string deployment_tag = 2;

  // Force reconciliation even if no changes are detected
  bool force = 3;
}

// DeleteServiceRequest requests deletion of a service.
message DeleteServiceRequest {
  // Name of the service to delete
  string name = 1;
  
  // Namespace of the service (optional, default: "default")
  string namespace = 2;
  
  // Force deletion without confirmation
  bool force = 3;
  
  // Timeout for graceful shutdown in seconds
  int32 timeout_seconds = 4;
  
  // Detach and return immediately
  bool detach = 5;
  
  // Dry run mode - show what would be deleted without actually deleting
  bool dry_run = 6;
  
  // Grace period for graceful shutdown in seconds
  int32 grace_period = 7;
  
  // Immediate deletion without graceful shutdown
  bool now = 8;
  
  // Don't error if service doesn't exist
  bool ignore_not_found = 9;
  
  // Optional finalizers to run
  repeated string finalizers = 10;

  // Ignore dependents and proceed with deletion (MVP override)
  bool no_dependencies = 11;
}

// DeleteServiceResponse returns the result of a service deletion.
message DeleteServiceResponse {
  // ID of the deletion operation
  string deletion_id = 1;
  
  // Status of the deletion
  Status status = 2;
  
  // Warning messages
  repeated string warnings = 3;
  
  // Error messages
  repeated string errors = 4;
  
  // Cleanup operations that will be performed
  repeated string cleanup_operations = 5;
  
  // Whether cleanup was partial
  bool partial_cleanup = 6;
  
  // Finalizers that will be executed
  repeated Finalizer finalizers = 7;
}

// GetDeletionStatusRequest represents a request to get deletion status
message GetDeletionStatusRequest {
  string namespace = 1;
  string name = 2;
}

// GetDeletionStatusResponse represents the response from getting deletion status
message GetDeletionStatusResponse {
  DeletionOperation operation = 1;
}

// ListDeletionOperationsRequest represents a request to list deletion operations
message ListDeletionOperationsRequest {
  string namespace = 1;
  string status = 2;
}

// ListDeletionOperationsResponse represents the response from listing deletion operations
message ListDeletionOperationsResponse {
  repeated DeletionOperation operations = 1;
}



// DeletionOperation represents a deletion operation for a service
message DeletionOperation {
  string id = 1;
  string namespace = 2;
  string service_name = 3;
  int32 total_instances = 4;
  int32 deleted_instances = 5;
  int32 failed_instances = 6;
  int64 start_time = 7;
  int64 end_time = 8;
  string status = 9;
  string failure_reason = 10;
  repeated string pending_operations = 11;
  int64 estimated_completion = 12;
  repeated Finalizer finalizers = 13;
  repeated string finalizer_order = 14;
  string finalizer_status = 15;
}

// Finalizer represents a cleanup operation that must complete before deletion
message Finalizer {
  string id = 1;
  string name = 2;
  string type = 3;
  string status = 4;
  string error = 5;
  repeated FinalizerDependency dependencies = 6;
  int64 created_at = 7;
  int64 updated_at = 8;
  int64 completed_at = 9;
}

// FinalizerDependency represents a dependency between finalizers
message FinalizerDependency {
  string depends_on = 1;
  bool required = 2;
}

// ScaleServiceRequest requests a change in service scale.
message ScaleServiceRequest {
  // Name of the service to scale
  string name = 1;
  
  // Namespace of the service (optional, default: "default")
  string namespace = 2;
  
  // Number of instances to scale to
  int32 scale = 3;

  // Scaling mode (immediate or gradual)
  ScalingMode mode = 4;

  // Step size for gradual scaling (only used when mode is SCALING_MODE_GRADUAL)
  int32 step_size = 5;

  // Interval between scaling steps in seconds (only used when mode is SCALING_MODE_GRADUAL)
  int32 interval_seconds = 6;
}

// WatchScalingRequest requests to watch the scaling progress of a service.
message WatchScalingRequest {
  // Name of the service to watch
  string service_name = 1;
  
  // Namespace of the service (optional, default: "default")
  string namespace = 2;
  
  // Target scale to watch for (optional, if not specified, just watch current scaling operation)
  int32 target_scale = 3;
}

// ScalingStatusResponse returns the current scaling status.
message ScalingStatusResponse {
  // The current scale
  int32 current_scale = 1;
  
  // The target scale
  int32 target_scale = 2;
  
  // The number of running instances
  int32 running_instances = 3;
  
  // The number of pending instances
  int32 pending_instances = 4;
  
  // Whether the scaling operation is complete
  bool complete = 5;
  
  // Status message
  Status status = 6;
}

// ScalingMode defines how the scaling operation should be performed.
enum ScalingMode {
  // Scaling mode not specified (defaults to SCALING_MODE_IMMEDIATE)
  SCALING_MODE_UNSPECIFIED = 0;

  // Scale to the target immediately
  SCALING_MODE_IMMEDIATE = 1;

  // Scale gradually using the specified step size and interval
  SCALING_MODE_GRADUAL = 2;
}

// ServiceService manages services within the platform.
service ServiceService {
  // CreateService creates a new service.
  rpc CreateService(CreateServiceRequest) returns (ServiceResponse);
  
  // GetService retrieves a service by name.
  rpc GetService(GetServiceRequest) returns (ServiceResponse);
  
  // ListServices lists services with optional filtering.
  rpc ListServices(ListServicesRequest) returns (ListServicesResponse);
  
  // WatchServices watches services for changes.
  rpc WatchServices(WatchServicesRequest) returns (stream WatchServicesResponse);
  
  // UpdateService updates an existing service.
  rpc UpdateService(UpdateServiceRequest) returns (ServiceResponse);
  
  // DeleteService removes a service.
  rpc DeleteService(DeleteServiceRequest) returns (DeleteServiceResponse);
  
  // GetDeletionStatus gets the status of a deletion operation
  rpc GetDeletionStatus(GetDeletionStatusRequest) returns (GetDeletionStatusResponse);

  // ListDeletionOperations lists all deletion operations
  rpc ListDeletionOperations(ListDeletionOperationsRequest) returns (ListDeletionOperationsResponse);

  // ScaleService changes the scale of a service.
  rpc ScaleService(ScaleServiceRequest) returns (ServiceResponse);
  
  // WatchScaling watches the scaling progress of a service.
  rpc WatchScaling(WatchScalingRequest) returns (stream ScalingStatusResponse);
  
  // ListInstances lists instances for a service.
  rpc ListInstances(ListInstancesRequest) returns (ListInstancesResponse);
} 