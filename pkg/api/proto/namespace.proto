syntax = "proto3";

package rune.api;

option go_package = "github.com/rzbill/rune/pkg/api/generated";

import "pkg/api/proto/common.proto";

// Namespace represents a logical boundary for isolation and scoping of resources.
message Namespace {
  // Unique identifier for the namespace
  string id = 1;
  
  // Human-readable name for the namespace
  string name = 2;
  
  // Optional description for the namespace
  string description = 3;
  
  // Labels attached to the namespace for organization
  map<string, string> labels = 4;
  
  // Creation timestamp
  int64 created_at = 5;
  
  // Last update timestamp
  int64 updated_at = 6;
}

// CreateNamespaceRequest is the request for creating a namespace.
message CreateNamespaceRequest {
  // The namespace to create
  Namespace namespace = 1;
}

// GetNamespaceRequest is the request for getting a namespace.
message GetNamespaceRequest {
  // The name of the namespace to retrieve
  string name = 1;
}

// GetNamespaceResponse is the response for getting a namespace.
message GetNamespaceResponse {
  // The namespace
  Namespace namespace = 1;
  
  // Status information
  Status status = 2;
}

// CreateNamespaceResponse is the response for creating a namespace.
message CreateNamespaceResponse {
  // The created namespace
  Namespace namespace = 1;
  
  // Status information
  Status status = 2;
}

// ListNamespacesRequest is the request for listing namespaces.
message ListNamespacesRequest {
  // Optional label selector for filtering namespaces
  map<string, string> label_selector = 1;
  
  // Optional field selector for filtering namespaces
  map<string, string> field_selector = 2;
}

// ListNamespacesResponse is the response for listing namespaces.
message ListNamespacesResponse {
  // The list of namespaces
  repeated Namespace namespaces = 1;
  
  // Status information
  Status status = 2;
  
  // Paging information
  PagingParams paging = 3;
}

// DeleteNamespaceRequest is the request for deleting a namespace.
message DeleteNamespaceRequest {
  // The name of the namespace to delete
  string name = 1;
  
  // Whether to ignore if the namespace doesn't exist
  bool ignore_not_found = 2;
  
  // Whether to force deletion even if resources exist
  bool force = 3;
}

// DeleteNamespaceResponse is the response for deleting a namespace.
message DeleteNamespaceResponse {
  // Status information
  Status status = 2;
}

// WatchNamespacesRequest is the request for watching namespaces.
message WatchNamespacesRequest {
  // Optional label selector for filtering namespaces
  map<string, string> label_selector = 1;
  
  // Optional field selector for filtering namespaces
  map<string, string> field_selector = 2;
}

// WatchNamespacesResponse is the response for watching namespaces.
message WatchNamespacesResponse {
  // The namespace that changed
  Namespace namespace = 1;
  
  // The type of event
  EventType event_type = 2;
  
  // Status information
  Status status = 3;
}

// NamespaceService provides operations for managing namespaces.
service NamespaceService {
  // CreateNamespace creates a new namespace.
  rpc CreateNamespace(CreateNamespaceRequest) returns (CreateNamespaceResponse);
  
  // GetNamespace retrieves a namespace by name.
  rpc GetNamespace(GetNamespaceRequest) returns (GetNamespaceResponse);
  
  // ListNamespaces lists namespaces with optional filtering.
  rpc ListNamespaces(ListNamespacesRequest) returns (ListNamespacesResponse);
  
  // DeleteNamespace deletes a namespace.
  rpc DeleteNamespace(DeleteNamespaceRequest) returns (DeleteNamespaceResponse);
  
  // WatchNamespaces watches for namespace changes.
  rpc WatchNamespaces(WatchNamespacesRequest) returns (stream WatchNamespacesResponse);
}
