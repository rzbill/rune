name: Deploy with Rune

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/**'
      - '.github/workflows/rune-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'services/**'
      - '.github/workflows/rune-deploy.yml'
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy (leave empty for all)'
        required: false
        default: ''

env:
  RUNE_VERSION: v0.1.0  # Update this when releases are available

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Test on multiple OS for CLI compatibility
        os: [ubuntu-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rune CLI
        run: |
          echo "Installing Rune CLI version: ${{ env.RUNE_VERSION }}"
          
          # Download and install Rune CLI
          curl -fsSL https://raw.githubusercontent.com/rzbill/rune/master/scripts/install-cli.sh | bash -s -- --version ${{ env.RUNE_VERSION }}
          
          # Verify installation
          rune version
          
          # Show CLI help
          rune --help

      - name: Setup Rune Context
        run: |
          # Create Rune config directory
          mkdir -p ~/.rune
          
          # Set up context for your Rune server
          # Replace these values with your actual server details
          cat > ~/.rune/config.yaml <<EOF
          current-context: github-actions
          contexts:
            github-actions:
              server: ${{ secrets.RUNE_SERVER }}
              token: ${{ secrets.RUNE_TOKEN }}
              defaultNamespace: ${{ secrets.RUNE_NAMESPACE || 'system' }}
          EOF
          
          # Test connection
          rune status

      - name: Validate Services
        run: |
          echo "Validating service definitions..."
          
          # Find all service YAML files
          find services/ -name "*.yaml" -type f | while read -r service_file; do
            echo "Validating: $service_file"
            
            # Basic YAML validation
            if command -v yq >/dev/null 2>&1; then
              yq eval '.' "$service_file" > /dev/null
              echo "✅ $service_file - YAML syntax valid"
            else
              # Fallback to Python for YAML validation
              python3 -c "import yaml; yaml.safe_load(open('$service_file'))" 2>/dev/null
              echo "✅ $service_file - YAML syntax valid"
            fi
            
            # Rune-specific validation (if available)
            if rune help cast >/dev/null 2>&1; then
              echo "   - Service definition appears valid for Rune"
            fi
          done

      - name: Deploy Services
        run: |
          echo "Deploying services..."
          
          # Get service to deploy from workflow input or deploy all
          SERVICE_TO_DEPLOY="${{ github.event.inputs.service }}"
          
          if [ -n "$SERVICE_TO_DEPLOY" ]; then
            # Deploy specific service
            SERVICE_FILE="services/${SERVICE_TO_DEPLOY}.yaml"
            if [ -f "$SERVICE_FILE" ]; then
              echo "Deploying specific service: $SERVICE_TO_DEPLOY"
              rune cast "$SERVICE_FILE"
              echo "✅ Deployed: $SERVICE_TO_DEPLOY"
            else
              echo "❌ Service file not found: $SERVICE_FILE"
              exit 1
            fi
          else
            # Deploy all services
            echo "Deploying all services..."
            
            find services/ -name "*.yaml" -type f | while read -r service_file; do
              service_name=$(basename "$service_file" .yaml)
              echo "Deploying: $service_name"
              
              # Deploy the service
              rune cast "$service_file"
              
              # Wait a moment for deployment to stabilize
              sleep 5
              
              # Check service status
              if rune status "$service_name" >/dev/null 2>&1; then
                echo "✅ Deployed: $service_name"
              else
                echo "⚠️  Service deployed but status check failed: $service_name"
              fi
            done
          fi

      - name: Verify Deployment
        run: |
          echo "Verifying deployment..."
          
          # List all services
          rune get services
          
          # Show service status
          if [ -n "${{ github.event.inputs.service }}" ]; then
            SERVICE_NAME="${{ github.event.inputs.service }}"
            echo "Checking status of: $SERVICE_NAME"
            rune status "$SERVICE_NAME"
          else
            echo "Checking status of all services..."
            # This would need to be implemented based on your service naming convention
            echo "Service verification completed"
          fi

      - name: Cleanup (Optional)
        if: github.event_name == 'pull_request'
        run: |
          echo "Cleanup: This is a PR, services will be cleaned up after testing"
          # Add cleanup logic here if needed for PR testing
          # rune seal <service-name>  # to remove services

  # Optional: Add a job for testing services
  test-services:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rune CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/rzbill/rune/master/scripts/install-cli.sh | bash -s -- --version ${{ env.RUNE_VERSION }}

      - name: Setup Rune Context
        run: |
          mkdir -p ~/.rune
          cat > ~/.rune/config.yaml <<EOF
          current-context: github-actions
          contexts:
            github-actions:
              server: ${{ secrets.RUNE_SERVER }}
              token: ${{ secrets.RUNE_TOKEN }}
              defaultNamespace: ${{ secrets.RUNE_NAMESPACE || 'system' }}
          EOF

      - name: Run Service Tests
        run: |
          echo "Running service tests..."
          
          # Example: Test health endpoints
          # This would depend on your specific services
          echo "Service tests completed"
          
          # Example: Test API endpoints
          # curl -H "Authorization: Bearer ${{ secrets.RUNE_TOKEN }}" \
          #      "${{ secrets.RUNE_SERVER }}/health"
