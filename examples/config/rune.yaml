# Rune Server Configuration Example

# Server endpoints
server:
  # gRPC endpoint for API services
  grpc_address: ":8080"
  
  # HTTP endpoint for REST gateway
  http_address: ":8081"
  
  # TLS configuration (for future use)
  tls:
    enabled: false
    cert_file: "/path/to/cert.pem"
    key_file: "/path/to/key.pem"

# Data directory for persistent storage
# If not specified, a default OS-specific path will be used
data_dir: "/var/lib/rune"

# Client configuration
client:
  timeout: 30s
  retries: 3

# Docker runner configuration
docker:
  # API version to use (if not specified, auto-negotiation is used)
  # api_version: "1.43"
  
  # Fallback API version to use if auto-negotiation fails
  fallback_api_version: "1.43"
  
  # Timeout for API version negotiation in seconds
  negotiation_timeout_seconds: 3

  # Optional: permissions for host-side temp directories/files used for mounts
  # These are useful on macOS/Windows Docker Desktop where FUSE can restrict access.
  # Accepts strings like "0755" or integers (e.g., 493). If omitted, sensible defaults are used.
  # Secret mounts (e.g., /etc/secrets/...)
  # secret_dir_mode: "0755"   # directory mode for secret mounts
  # secret_file_mode: "0444"  # file mode for secret files (read-only for all)
  # Configmap mounts (e.g., /etc/configs/...)
  # config_dir_mode: "0755"   # directory mode for config mounts
  # config_file_mode: "0644"  # file mode for config files

# Default namespace
namespace: "default"

# Authentication
auth:
  # Comma-separated list of API keys
  # Leave empty to disable authentication
  api_keys: ""
  provider: "token"  # Options: token, oidc, none
  token: ""  # Static token for simple auth

# Resources
resources:
  cpu:
    default_request: "100m"
    default_limit: "500m"
  memory:
    default_request: "128Mi"
    default_limit: "256Mi"

# Logging configuration
log:
  # Log level (debug, info, warn, error)
  level: "info"
  
  # Log format (future use)
  format: "json"

# Encrypts secret values at rest using AES-256-GCM with per-secret DEKs wrapped by a master KEK.
# KEK can be sourced from a file or environment variable.
secret:
  encryption:
    enabled: true
    kek:
      # Source of the master Key Encryption Key
      # Options: file | env | generated (generated is for development only)
      source: file
      
      # Path to base64-encoded 32-byte KEK (0600 permissions recommended)
      file: "/etc/rune/kek.b64"
      
      # Optional: protect on-disk KEK with a passphrase-derived key (Argon2id)
      passphrase:
        enabled: false
        # If enabled, provide passphrase via this env var (non-interactive)
        env: RUNE_KEK_PASSPHRASE

# Alternative: provide KEK via environment variable when source: env
# export RUNE_MASTER_KEY=base64-encoded-32-byte-key

# Additional plugins/extensions (future use)
plugins:
  dir: "/usr/local/lib/rune/plugins"
  enabled:
    - "metrics"
    - "backup" 